#!/usr/bin/env perl


=head1 CONTACT

  Please email comments or questions to authors

=cut

=head1 NAME

Checks the database of genomic variants, labels with ensembl api, then annotates with named VCF

=head1 SYNOPSIS

	perl check_cnv_db.pl -cnv 
=head1 DESCRIPTION

This script will use the cnv file generated by exomedepth, to check against dgv, to label genes, to annotate from VCFS

=head1 SEE ALSO

=head1 FEEDBACK

Chela James chela.james@ucl.ac.uk

=head1 AUTHORS

Chela James - Email E<lt>chela.james@ucl.ac.ukE<gt>
=cut

use strict;
use warnings;
use Getopt::Long;
#Pick up script name automatically for usage message
my $script=substr($0, 1+rindex($0,'/'));


#Set usage message
my $usage="Usage: $script  
          -database 
          -input
          -output 
          Please try again.\n\n\n";

my ($database, $input, $output);

open(DATABASE, $database);
open(INPUT, $input);
open(OUTPUT, >$output);





my %db_dict;
my @db_positions;
my $accession;
while(<DATABASE>){
if ($_ =~ /^variantaccession/){next}
chomp  $_;
@db_positions = split("\t", $_);
$accession = $db_positions[0]

# create dictionary whereby the key consists of the second third and fourth positions and the value is the name of the dgv variant
$db_dict[ $db_positions[1], $db_positions[2], $db_positions[3] ] = $db_positions[0]





database_file.close()

output_file = open(args.output, 'w')

output_file.write('"start.p","end.p","type","nexons","start","end","chromosome","id","BF","reads.expected","reads.observed","reads.ratio","EnsemblID","gene","type","in dgv","dgv name","dgv freq"\n')

test_file = open(args.input,'r')
lines = test_file.readlines()


def find_key(chrom, start, end):
for k, v in db_dict.iteritems():
db_start = int(k[1])
db_end = int(k[2])
if chrom == k[0] and start >= db_start and end <= db_end:
return db_dict[k]



for location in lines:

if not 'start' in location:
     location = location.strip("\n")
         location = location.replace('"','')
         location = location.replace('chr','')
         pos=location.split(',')
         test_positions = re.split('\-|:',pos[7])

chrom = test_positions[0]
#print chrom
start = int(test_positions[1])
#print start
end = int(test_positions[2])
#print end


dgv_var_name = find_key( chrom, start , end )

if dgv_var_name == None:
not_in_dgv=location + ",not in dgv,NA\n"
output_file.write( not_in_dgv )
else:
in_dgv=location + ",present in dgv," + dgv_var_name+ "\n"
output_file.write( in_dgv )

